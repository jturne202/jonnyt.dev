{"version":3,"sources":["Content/Jonathan Turner CV.pdf","components/about.js","components/contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","About","react_default","a","createElement","id","React","Component","contact","Contact","className","href","Resume","target","rel","Description_default","Email_default","LinkedIn_default","App","about_About","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qPCEnBC,0LAGb,OACAC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,sBACJH,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,KAAGC,GAAG,mBAAN,4QAGIH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAHT,kaAQIF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WART,2KANuBE,IAAMC,gFCI1BC,EAAA,SAAAC,GACX,OACIP,EAAAC,EAAAC,cAAA,OAAKC,GAAG,wBACJH,EAAAC,EAAAC,cAAA,OAAKM,UAAU,oBAAoBL,GAAG,UAClCH,EAAAC,EAAAC,cAAA,KAAGO,KAAMC,IAAQC,OAAO,SAASC,IAAI,uBAAsBZ,EAAAC,EAAAC,cAAEW,EAAAZ,EAAF,OAC3DD,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGO,KAAMC,IAAQC,OAAO,SAASC,IAAI,uBAArC,iBAEPZ,EAAAC,EAAAC,cAAA,OAAKM,UAAU,qBACXR,EAAAC,EAAAC,cAAA,KAAGO,KAAK,6BAA4BT,EAAAC,EAAAC,cAACY,EAAAb,EAAD,OACpCD,EAAAC,EAAAC,cAAA,8BAAqBF,EAAAC,EAAAC,cAAA,KAAGO,KAAK,6BAAR,uBAFzB,MAIAT,EAAAC,EAAAC,cAAA,OAAKM,UAAU,qBACXR,EAAAC,EAAAC,cAAA,KAAGO,KAAK,6BAA4BT,EAAAC,EAAAC,cAACa,EAAAd,EAAD,OACpCD,EAAAC,EAAAC,cAAA,4BAAmBF,EAAAC,EAAAC,cAAA,KAAGO,KAAK,+CAA+CE,OAAO,UAA9D,gBCDpBK,mLAXX,OACEhB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WACbR,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACI,EAAD,eANQD,aCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.edab3f5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Jonathan Turner CV.e48c843e.pdf\";","import React from 'react';\r\n\r\nexport default class About extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id='about-me-container'>\r\n            <h1>Hi, I'm Jonathan ðŸ‘‹</h1>\r\n            <p id='about-paragragh'>\r\n                I'm a driven, diligent, passionate software engineer located in Glasgow with over five years of industry experience under my belt. \r\n                I have experience in almost all aspects of the software development lifecycle, from concept right through to development and delivery. \r\n                <br/><br/>\r\n                Graduating in 2018 from Glasgow Caledonian University, I excel working within both team environments and autonomously. \r\n                I am flexible, self-motivated and a thorough communicator. I have strong skills in Java, C#, JavaScript and SQL, though have picked up \r\n                many technologies across my career and in my own time with personal projects. I am always interested in learning something new, \r\n                both technical and non-technical!\r\n                <br/><br/>\r\n                If you believe I would be a good fit in your team, please checkout my resume and get in tough via one of the methods below. \r\n                I look forward to hearing from you!\r\n            </p>\r\n        </div>   \r\n    )}\r\n}","import React from 'react';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport Resume from '../Content/Jonathan Turner CV.pdf'\r\nimport Description from '@material-ui/icons/Description'\r\n\r\nexport default Contact => {\r\n    return (\r\n        <div id='contact-me-container'>\r\n            <div className='contact-container' id='resume'>\r\n                <a href={Resume} target='_blank' rel='noopener noreferrer'>< Description /></a>\r\n                <p><a href={Resume} target='_blank' rel='noopener noreferrer'>View Resume</a></p>\r\n            </div>\r\n            <div className='contact-container'>\r\n                <a href='mailto:contact@jonnyt.dev'><EmailIcon /></a>\r\n                <p>Send me an email: <a href='mailto:contact@jonnyt.dev'>contact@jonnyt.dev</a></p>  {/* TODO: npm copy to clipboard */} \r\n            </div>\r\n            <div className='contact-container'>\r\n                <a href='mailto:contact@jonnyt.dev'><LinkedInIcon /></a>\r\n                <p>Contact me via: <a href='https://www.linkedin.com/in/jonathanturner95' target='_blank'>LinkedIn</a></p>\r\n            </div>\r\n            {/* TODO: Add message area */}\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport About from './components/about.js';\r\nimport Contact from './components/contact.js'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <div className='content'>\r\n          <About />\r\n          <Contact />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}